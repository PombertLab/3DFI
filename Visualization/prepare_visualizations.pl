#!/usr/bin/perl

use strict; use warnings; use Getopt::Long qw(GetOptions); use File::Basename; use Cwd qw(abs_path);

my $name = "prepare_visualizations.pl";
my $version = "0.4";
my $updated = "2021-09-02";

my $usage = << "EXIT";
NAME	${name}
VERSION	${version}
UPDATED	${updated}

SYNOPSIS	The purpose of this script is to take predicted .pdb files and create visual comparisons
		with matched experimentally determined structures from RCSB.

USAGE	${name} \\
		-g GESAMT.RCSB.matches \\
		-r /media/FatCat/Databases/RCSB/PDB \\
		-p Pred_PDB \\
		-k 

OPTIONS
-g (--gesamt)	GESAMT descriptive matches ## generated by descriptive_matches.pl
-p (--pred)	Absolute path to predicted .pdb files
-r (--rcsb)	Absolute path to RCSB .ent.gz files
-k (--keep)	Keep unzipped RCSB .ent files
-o (--outdir)	Output directory for ChimeraX sessions [Default: ./3D_Visualizations]
EXIT
die "\n\n$usage\n\n" unless @ARGV;

my $match_file;
my $pdb;
my $rcsb;
my $keep;
my $outdir = "./3D_Visualizations";

GetOptions(
	"g|gesamt=s" => \$match_file,
	"p|pdb=s" => \$pdb,
	"r|rcsb=s" => \$rcsb,
	"k|keep" => \$keep,
	"o|out=s" => \$outdir,
);

## Check that all mandatory args have been provided
Check_Mand_Args();

unless (-d $outdir){
	mkdir ($outdir,0755) or die "\n[ERROR]\tUnable to create $outdir: $!\n";
}

## Load predicted pdb filenames into database
my %pred;
opendir (PRED,$pdb) or die "\n[ERROR]\tCan't open $pdb: $!\n";
while (my $file = readdir(PRED)){
	if ($file =~ /^(\S+)\.pdb/){
		my $model = $1;
		$pred{$model} = "$pdb/$file";
		## Make a directory for each locus that has a pdb file
		unless (-d "$outdir/$model"){
			mkdir ("$outdir/$model",0755) or die "Can't create $outdir/$model: $!\n";
		}
		## Copy the pdb file to the locus directory
		system "cp $pdb/$file $outdir/$model/$file";
	}
}
closedir PRED;

## Link RCSB PDB files to their file locations
my %db;
if ($rcsb){
	## Recurse through the RCSB PDB database
	opendir (EXT,$rcsb) or die "\n[ERROR]\tCan't open $rcsb: $!\n";
	while (my $dir = readdir(EXT)){
		## Ignoring files, if any
		unless (-f $dir){
			opendir (INT,"$rcsb/$dir") or die "Can't open $rcsb/$dir: $!\n";
			while (my $file = readdir(INT)){
				## Store the absolute file path under the filename of the .ent.gz file
				if ($file =~ /\w+/){
					$db{$file} = "$rcsb/$dir/$file";
				}
			}
			closedir INT;
		}
	}
	closedir EXT;
}

## For each match, get the filename of the best match for RCSB
open MATCH, "<", "$match_file" or die "Can't open $match_file: $!\n";
my $match;
my $model_tag;
my %sessions;
while (my $line = <MATCH>){
	chomp $line;
	## Check the PDB headers for proteins that are in the selection provided
	if ($line =~ /^###/){
		my $filename = (fileparse($line))[0];
		($model_tag) = $filename =~ /### (\S+)\;/;
		if (-d "$outdir/$model_tag"){
			$match = 1;
		}
		else {
			$match = undef;
		}
	}
	## Store the matching RCSB .ent.gz filepath  under the locus tag
	elsif ($match){
		my @temp_data = split("\t",$line);
		my $pdb_file = $temp_data[9];
		my $pdb_chain = $temp_data[3];
		push (@{$sessions{$model_tag}}, "$db{$pdb_file};$pdb_chain");
	}
}
close MATCH;

## For each session create a visualization of the predicted pdb, and if given, the alignment between the predicted
## pdb and the matching RCSB chain
my ($filename,$dir) = fileparse($0);
my $script = "$dir/Helper_Scripts/chimerax_session_creator.py";
foreach my $locus (sort(keys(%sessions))){
	my $pred_file = $pred{$locus};
	## If there are any matches with RCSB, create those visualizations 
	if (scalar(@{$sessions{$locus}}) > 1){
		foreach my $match (@{$sessions{$locus}}){
			if ($match){
				my @temp_data = split(";",$match);
				my $pdb_file = $temp_data[0];
				my ($rcsb_name) = $pdb_file =~ /pdb(\w+).ent.gz$/;
				my $chain = $temp_data[1];

				## Create temporary unzipped version of RCSB file for ChimeraX session creation
				my $temp = "$outdir/$locus/$rcsb_name.pdb";
				system "zcat $pdb_file > $temp";

				$outdir = abs_path($outdir);
				my $cxs_name = "$outdir/$locus/${locus}_${rcsb_name}_$chain.cxs";
				if (-e $cxs_name) { print "  Alignment between $locus and $rcsb_name chain $chain found. Skipping alignment...\n"; }
				else {
					# ChimeraX API calling
					print "  Aligning $locus to chain $chain from $rcsb_name with ChimeraX\n";
					system "chimerax 1> /dev/null --nogui $script \\
						-p $pred_file \\
						-r $temp \\
						-m $rcsb_name \\
						-c $chain \\
						-o $outdir/$locus"
					;
				}
				## Remove temporary file unless explicitly told not to
				unless ($keep){
					system "rm $temp";
				}
			}
		}
	}
}

## Subroutines
sub Check_Mand_Args{
	die "\n[ERROR]\tGESAMT descriptive match file not provided\n\n$usage\n\n" unless $match_file;
	die "\n[WARNING]\tRCSB PDB directory not provided, no comparison visualizations will be made" unless $rcsb;
	die "\n[ERROR]\tPredicted PDB directory not provided\n\n$usage\n\n" unless $pdb;
}
