#!/usr/bin/perl

use strict; use warnings; use Getopt::Long qw(GetOptions); use File::Basename;

my $name = "Visualize_PDB.pl";
my $version = "0.2";
my $updated = "2021-05-13";

my $usage = << "EXIT";
NAME	${name}
VERSION	${version}
UPDATED	${updated}

SYNOPSIS	The purpose of this script is to take predicted .pdb files and create visual comparisons
		with matched experimentally determined structures from RCSB.

USAGE	${name} \\
		-m GESAMT.RCSB.matches \\
		-r /media/FatCat/Databases/RCSB/PDB \\
		-p Pred_PDB

OPTIONS
-m (--match)	GESAMT descriptive matches ## generated by descriptive_matches.pl
-p (--pred)	Absolute path to predicted .pdb files
-j (--just)	Just make visualizations for the predicted 3D structures
-r (--rcsb)	Absolute path to RCSB .ent.gz files
-o (--outdir)	Output directory for ChimeraX sessions [Default: ./CXS]
EXIT
die("\n\n$usage\n\n") unless(@ARGV);

my $match_file;
my $pdb;
my $just;
my $rcsb;
my $outdir = "./3D_Visualizations";

GetOptions(
	"m|match=s" => \$match_file,
	"p|pdb=s" => \$pdb,
	"j|just" => \$just,
	"r|rcsb=s" => \$rcsb,
	"o|out=s" => \$outdir,
);

## Check that all mandatory args have been provided
Check_Mand_Args();

unless(-d $outdir){
	mkdir($outdir,0755) or die "\n[ERROR]\tUnable to create $outdir: $!\n";
}

## Load predicted pdb filenames into database
my %pred;
opendir(PRED,$pdb) or die("\n[ERROR]\tCan't open $pdb: $!\n");
while (my $file = readdir(PRED)){
	if ($file =~ /^(\w+)/){
		$pred{$1} = "$pdb/$file";
	}
}
closedir PRED;

## Link RCSB PDB files to their file locations
my %db;
if ($rcsb){
	opendir(EXT,$rcsb) or die("\n[ERROR]\tCan't open $rcsb: $!\n");
	while (my $dir = readdir(EXT)){
		opendir(INT,"$rcsb/$dir") or die("Can't open $rcsb/$dir: $!\n");
		while (my $file = readdir(INT)){
			if ($file =~ //){
				$db{$file} = "$rcsb/$dir/$file";
			}
		}
		closedir INT;
	}
	closedir EXT;
}

## For each match, get the filename of the best match for RCSB
my %sessions;
open MATCH, "<", "$match_file" or die("Can't open $match_file: $!\n");
my $locus_tag;
my $prev_tag;
my $match_found=2;
my $skip = 0;
while (my $line = <MATCH>){
	chomp($line);
	if ($line =~ /^###\s\S+\/(\w+)/){
		$locus_tag = $1;
		unless (exists $pred{$locus_tag}){
			$skip = 1;
			next;
		}
		if ($match_found == 0 && $prev_tag){
			$sessions{$prev_tag} = [(1)];
		}
		$match_found = 0;
		$skip = 0;
		$prev_tag = $locus_tag;
		next;
	}
	elsif ($line =~ /(\S+\.ent\S*)\t.+?$/ && $skip == 0){
		my $file = $1; 
		push(@{$sessions{$locus_tag}},$db{$file});
		$match_found = 1;
	}
}
close MATCH;

my ($filename,$dir) = fileparse($0);
my $script = "$dir/Helper_Scripts/ChimeraX_Session_Creator.py";
foreach my $locus (sort(keys(%sessions))){
	my $pred_file = $pred{$locus}; 
	unless (-d "$outdir/$locus"){
		mkdir ("$outdir/$locus",0755) or die "Can't create $outdir/$locus: $!\n";
	}
	system "ln -sf $pred_file $outdir/$locus/$locus.pdb";
	unless($just){
		if(scalar(@{$sessions{$locus}}) > 1){
			foreach my $match (@{$sessions{$locus}}){
				if($match){
					print "Copying $match\n";
					my ($rcsb_name) = $match =~ /pdb(\w+).ent.gz$/;
					my $temp = "$outdir/$locus/$rcsb_name.pdb";
					system "zcat $match > $temp";
					system("chimerax --nogui $script \\
						-p $pred_file \\
						-r $temp \\
						-m $rcsb_name \\
						-o $outdir/$locus"
					);
					system "rm $temp";
				}
			}
		}
	}
}

## Subroutines
sub Check_Mand_Args{
	die "\n[ERROR]\tGESAMT descriptive match file not provided\n\n$usage\n\n" unless($match_file);
	unless($just){
		die "\n[ERROR]\tRCSB PDB directory not provided\n\n$usage\n\n" unless($rcsb);
	}
	die "\n[ERROR]\tPredicted PDB directory not provided\n\n$usage\n\n" unless($pdb);
}
