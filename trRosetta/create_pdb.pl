#!/usr/bin/perl
## Pombert Lab 2020
my $version = '0.2';
my $name = 'create_pdb.pl';
my $updated = '2021-04-22';

use strict; use warnings; use Getopt::Long qw(GetOptions); use File::Basename; use threads; use threads::shared;

## Usage definition
my $USAGE = <<"OPTIONS";
NAME		${name}
VERSION		${version}
UPDATED		${updated}
SYNOPSIS	Creates .pdb files with trRosetta from .npz files
REQUIREMENTS	trRosetta - https://github.com/gjoni/trRosetta

COMMAND		${name} \\
		  -c 10 \\
		  -n NPZ/*.npz \\
		  -o PDB/ \\
		  -f TEST/ \\
		  -t /media/Data_3/opt/trRosetta/pdb/trRosetta.py

OPTIONS:
-c (--cpu)	Number of cpu threads to use [Default: 10] ## i.e. runs n processes in parallel
-m (--memory)	Memory available (in Gb) required before thread launch [Default: 16] 
-n (--npz)	.npz files generated by hhblits
-o (--output)	Output folder [Default: ./]
-t (--trosetta)	Path to trRosetta.py from trRosetta
-f (--fasta)	Folder containing the oneliner fasta files
-p (--python)	Preferred Python interpreter [Default: python]
OPTIONS
die "\n$USAGE\n" unless @ARGV;

## Defining options
my @npz;
my $out = './';
my $trosetta;
my $fasta;
my $threads = 10;
my $python = 'python';
my $memory = 16;
GetOptions(
	'n|npz=s@{1,}' => \@npz,
	'o|output=s' => \$out,
	't|trosetta=s' => \$trosetta,
	'f|fasta=s' => \$fasta,
	'c|cpu=i' => \$threads,
	'p|python=s' => \$python,
	'm|memory=i' => \$memory
);

## Checking output folder
unless (-d $out){
	mkdir ($out,0755) or die "Can't create folder $out: $!\n";
}

## Initialize # of threads specified
my @threads = initThreads();

## Copying the array into a shared list for multithreading (use threads::shared;)
my @files :shared = @npz;

## Create threads that run the exe subroutine
for my $thread (@threads){
	$thread = threads -> create(\&exe);
}

# Run until threads are done
for my $thread (@threads){
	$thread -> join();
}

## Subroutines

sub initThreads{ 
	# An array to place our threads in
	my @initThreads;
	for (my $i = 1; $i <= $threads; $i++){ push(@initThreads,$i); }
	return @initThreads;
}

sub exe{

	#Get the thread id. Allows each thread to be identified.
	my $id = threads->tid();

	while (my $npz = shift@files){

		my ($name, $dir) = fileparse($npz);
		my ($prefix, $evalue) = $name =~ /^(\S+)\.(\S+)\.(\w+)$/;

		## Checking memory usage to prevent memory overload issues
		MEM: while(0==0){

			sleep(5);
			my $memory_usage = `free -g | grep 'Mem'`;
			my @cols = split (/\s+/, $memory_usage);
			my $total_memory = $cols[1];
			my $available_memory = $cols[-1];

			if ($available_memory >= $memory){
				last MEM;
			}
			print "\nAvailable/total memory is $available_memory/$total_memory Gb\n".
			print "\nThread $id is waiting 15 seconds to work on $name\n";
			sleep(10);
		}

		## If memory is fine, go ahead
		print "\nThread $id is working on file: $name\n\n";

		system "$python \\
		  $trosetta \\
		  $npz \\
		  $fasta/$prefix.fasta \\
		  $out/$prefix.$evalue.pdb";

	}

	threads -> exit();

}