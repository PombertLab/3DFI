#!/usr/bin/perl
## Pombert Lab 2020
my $version = '0.1a';
my $name = 'create_pdb.pl';
my $updated = '12/03/2021';

use strict; use warnings; use Getopt::Long qw(GetOptions); use File::Basename; use threads; use threads::shared;

## Usage definition
my $USAGE = <<"OPTIONS";
NAME		${name}
VERSION		${version}
UPDATED		${updated}
SYNOPSIS	Creates .pdb files with trRosetta from .npz files
REQUIREMENTS	trRosetta - https://github.com/gjoni/trRosetta

COMMAND		${name} \\
		  -c 10 \\
		  -n NPZ/*.npz \\
		  -o PDB/ \\
		  -f TEST/ \\
		  -t /media/Data_3/opt/trRosetta/pdb/trRosetta.py

OPTIONS:
-c (--cpu)	Number of cpu threads to use [Default: 10] ## i.e. runs n processes in parallel
-n (--npz)	.npz files generated by hhblits
-o (--output)	Output folder
-t (--trosetta)	Path to trRosetta.py from trRosetta
-f (--fasta)	Folder containing the oneliner fasta files
OPTIONS
die "\n$USAGE\n" unless @ARGV;

## Defining options
my @npz;
my $out;
my $trosetta;
my $fasta;
my $threads = 10;
GetOptions(
	'n|npz=s@{1,}' => \@npz,
	'o|output=s' => \$out,
	't|trosetta=s' => \$trosetta,
	'f|fasta=s' => \$fasta,
	'c|cpu=i' => \$threads
);

if (!defined $out){$out = './';}
unless (-d $out){mkdir ($out,0755) or die "Can't create folder $out: $!\n";}

my @threads = initThreads();
my @files :shared = @npz;	## Copying the array into a shared list for multithreading (use threads::shared;)
for(@threads){$_ = threads->create(\&exe);}	# Tell threads run the exe sub
for(@threads){$_->join();}	# Run until threads are done
exit;

## subroutines
sub initThreads{ # An array to place our threads in
	my @initThreads;
	for(my $i = 1;$i<=$threads;$i++){push(@initThreads,$i);}
	return @initThreads;
}

sub exe{
	my $id = threads->tid();  #Get the thread id. Allows each thread to be identified.
    while (my $npz = shift@files){
        my($name, $dir) = fileparse($npz);
        my ($prefix, $evalue) = $name =~ /^(\S+)\.(\S+)\.(\w+)$/;
        print "\nWorking on file: $name\n\n";
        system "python $trosetta $npz $fasta/$prefix.fasta $out/$prefix.$evalue.pdb";
    }
	threads->exit();
}
